{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.37.4.10188",
      "templateHash": "9846542205657562466"
    }
  },
  "parameters": {
    "environmentName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 64,
      "metadata": {
        "description": "Name of the environment that can be used as part of naming resource convention"
      }
    },
    "location": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Primary location for all resources"
      }
    },
    "containerAppImageName": {
      "type": "string",
      "defaultValue": "mcr.microsoft.com/k8se/quickstart:latest",
      "metadata": {
        "description": "The image name for the app service"
      }
    },
    "principalId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Principal ID of the user running deployment (for ACR push access)"
      }
    },
    "containerAppExists": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Specifies if the container app already exists"
      }
    }
  },
  "variables": {
    "$fxv#0": {
      "appContainerApps": "ca-",
      "appManagedEnvironments": "cae-",
      "cacheRedis": "redis-",
      "containerRegistryRegistries": "cr",
      "insightsComponents": "ai-",
      "managedIdentityUserAssignedIdentities": "id-",
      "networkNetworkSecurityGroups": "nsg-",
      "networkPrivateEndpoints": "pe-",
      "networkVirtualNetworks": "vnet-",
      "operationalInsightsWorkspaces": "log-",
      "resourcesResourceGroups": "rg-"
    },
    "abbrs": "[variables('$fxv#0')]",
    "resourceToken": "[toLower(uniqueString(subscription().id, parameters('environmentName'), parameters('location')))]",
    "tags": {
      "azd-env-name": "[parameters('environmentName')]"
    }
  },
  "resources": {
    "resourceGroup": {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]"
    },
    "managedIdentity": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "managed-identity",
      "resourceGroup": "[format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "managedIdentityName": {
            "value": "[format('{0}{1}', variables('abbrs').managedIdentityUserAssignedIdentities, variables('resourceToken'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "8294454104775525492"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "managedIdentityName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2024-11-30",
              "name": "[parameters('managedIdentityName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]"
            }
          ],
          "outputs": {
            "managedIdentityId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
            },
            "managedIdentityName": {
              "type": "string",
              "value": "[parameters('managedIdentityName')]"
            },
            "managedIdentityPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2024-11-30').principalId]"
            },
            "managedIdentityClientId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2024-11-30').clientId]"
            }
          }
        }
      },
      "dependsOn": [
        "resourceGroup"
      ]
    },
    "monitoring": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "monitoring",
      "resourceGroup": "[format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "logAnalyticsName": {
            "value": "[format('{0}{1}', variables('abbrs').operationalInsightsWorkspaces, variables('resourceToken'))]"
          },
          "applicationInsightsName": {
            "value": "[format('{0}{1}', variables('abbrs').insightsComponents, variables('resourceToken'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "5036715824778341172"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "logAnalyticsName": {
              "type": "string"
            },
            "applicationInsightsName": {
              "type": "string"
            }
          },
          "resources": {
            "logAnalytics": {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2023-09-01",
              "name": "[parameters('logAnalyticsName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "sku": {
                  "name": "PerGB2018"
                },
                "retentionInDays": 30,
                "publicNetworkAccessForIngestion": "Enabled",
                "publicNetworkAccessForQuery": "Enabled"
              }
            },
            "applicationInsights": {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[parameters('applicationInsightsName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web",
                "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsName'))]",
                "publicNetworkAccessForIngestion": "Enabled",
                "publicNetworkAccessForQuery": "Enabled",
                "CustomMetricsOptedInType": "WithDimensions"
              },
              "dependsOn": [
                "logAnalytics"
              ]
            }
          },
          "outputs": {
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsName'))]"
            },
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "value": "[parameters('logAnalyticsName')]"
            },
            "applicationInsightsConnectionString": {
              "type": "securestring",
              "value": "[reference('applicationInsights').ConnectionString]"
            }
          }
        }
      },
      "dependsOn": [
        "resourceGroup"
      ]
    },
    "network": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "network",
      "resourceGroup": "[format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "vnetName": {
            "value": "[format('{0}{1}', variables('abbrs').networkVirtualNetworks, variables('resourceToken'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "2183632934063892535"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "vnetName": {
              "type": "string"
            }
          },
          "variables": {
            "vnetAddressPrefix": "10.0.0.0/16",
            "containerAppsSubnetPrefix": "10.0.1.0/24",
            "privateEndpointSubnetPrefix": "10.0.2.0/24"
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2024-05-01",
              "name": "[format('nsg-{0}-chaos', parameters('vnetName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "securityRules": []
              }
            },
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2024-05-01",
              "name": "[parameters('vnetName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "[variables('vnetAddressPrefix')]"
                  ]
                },
                "subnets": [
                  {
                    "name": "containerApps",
                    "properties": {
                      "addressPrefix": "[variables('containerAppsSubnetPrefix')]",
                      "delegations": [
                        {
                          "name": "Microsoft.App.environments",
                          "properties": {
                            "serviceName": "Microsoft.App/environments"
                          }
                        }
                      ]
                    }
                  },
                  {
                    "name": "privateEndpoints",
                    "properties": {
                      "addressPrefix": "[variables('privateEndpointSubnetPrefix')]",
                      "privateEndpointNetworkPolicies": "Enabled",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-{0}-chaos', parameters('vnetName')))]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-{0}-chaos', parameters('vnetName')))]"
              ]
            }
          ],
          "outputs": {
            "vnetId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
            },
            "containerAppsSubnetId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName')), '2024-05-01').subnets[0].id]"
            },
            "privateEndpointSubnetId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName')), '2024-05-01').subnets[1].id]"
            },
            "nsgId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-{0}-chaos', parameters('vnetName')))]"
            },
            "nsgName": {
              "type": "string",
              "value": "[format('nsg-{0}-chaos', parameters('vnetName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "resourceGroup"
      ]
    },
    "redis": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "redis",
      "resourceGroup": "[format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "redisName": {
            "value": "[format('{0}{1}', variables('abbrs').cacheRedis, variables('resourceToken'))]"
          },
          "vnetId": {
            "value": "[reference('network').outputs.vnetId.value]"
          },
          "privateEndpointSubnetId": {
            "value": "[reference('network').outputs.privateEndpointSubnetId.value]"
          },
          "containerAppPrincipalId": {
            "value": "[reference('managedIdentity').outputs.managedIdentityPrincipalId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "5783990434896017842"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "redisName": {
              "type": "string"
            },
            "vnetId": {
              "type": "string"
            },
            "privateEndpointSubnetId": {
              "type": "string"
            },
            "containerAppPrincipalId": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "resources": [
            {
              "type": "Microsoft.Cache/redisEnterprise",
              "apiVersion": "2024-10-01",
              "name": "[parameters('redisName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Balanced_B0"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "minimumTlsVersion": "1.2"
              }
            },
            {
              "type": "Microsoft.Cache/redisEnterprise/databases",
              "apiVersion": "2024-10-01",
              "name": "[format('{0}/{1}', parameters('redisName'), 'default')]",
              "properties": {
                "clientProtocol": "Encrypted",
                "port": 10000,
                "clusteringPolicy": "OSSCluster",
                "evictionPolicy": "NoEviction",
                "persistence": {
                  "aofEnabled": false,
                  "rdbEnabled": false
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cache/redisEnterprise', parameters('redisName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2024-06-01",
              "name": "privatelink.redis.azure.net",
              "location": "global",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2024-06-01",
              "name": "[format('{0}/{1}', 'privatelink.redis.azure.net', format('vnetlink-{0}', parameters('redisName')))]",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[parameters('vnetId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.redis.azure.net')]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2024-05-01",
              "name": "[format('pe-{0}', parameters('redisName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('plsc-{0}', parameters('redisName'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Cache/redisEnterprise', parameters('redisName'))]",
                      "groupIds": [
                        "redisEnterprise"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cache/redisEnterprise', parameters('redisName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2024-05-01",
              "name": "[format('{0}/{1}', format('pe-{0}', parameters('redisName')), 'default')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "redis-config",
                    "properties": {
                      "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.redis.azure.net')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.redis.azure.net')]",
                "[resourceId('Microsoft.Network/privateEndpoints', format('pe-{0}', parameters('redisName')))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('containerAppPrincipalId')))]",
              "type": "Microsoft.Cache/redisEnterprise/databases/accessPolicyAssignments",
              "apiVersion": "2024-10-01",
              "name": "[format('{0}/{1}/{2}', parameters('redisName'), 'default', 'container-app-assignment')]",
              "properties": {
                "accessPolicyName": "default",
                "user": {
                  "objectId": "[parameters('containerAppPrincipalId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cache/redisEnterprise/databases', parameters('redisName'), 'default')]"
              ]
            }
          ],
          "outputs": {
            "redisId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Cache/redisEnterprise', parameters('redisName'))]"
            },
            "redisHost": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Cache/redisEnterprise', parameters('redisName')), '2024-10-01').hostName]"
            },
            "redisPort": {
              "type": "int",
              "value": 10000
            }
          }
        }
      },
      "dependsOn": [
        "managedIdentity",
        "network",
        "resourceGroup"
      ]
    },
    "containerRegistry": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "container-registry",
      "resourceGroup": "[format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "registryName": {
            "value": "[format('{0}{1}', variables('abbrs').containerRegistryRegistries, variables('resourceToken'))]"
          },
          "vnetId": {
            "value": "[reference('network').outputs.vnetId.value]"
          },
          "privateEndpointSubnetId": {
            "value": "[reference('network').outputs.privateEndpointSubnetId.value]"
          },
          "currentUserPrincipalId": {
            "value": "[parameters('principalId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "392664529289598712"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "registryName": {
              "type": "string"
            },
            "vnetId": {
              "type": "string"
            },
            "privateEndpointSubnetId": {
              "type": "string"
            },
            "currentUserPrincipalId": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "resources": [
            {
              "type": "Microsoft.ContainerRegistry/registries",
              "apiVersion": "2023-07-01",
              "name": "[parameters('registryName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Premium"
              },
              "properties": {
                "adminUserEnabled": false,
                "publicNetworkAccess": "Enabled",
                "networkRuleBypassOptions": "AzureServices"
              }
            },
            {
              "condition": "[not(equals(parameters('currentUserPrincipalId'), ''))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('registryName'))]",
              "name": "[guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName')), parameters('currentUserPrincipalId'), '8311e382-0749-4cb8-b61a-304f252e45ec')]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '8311e382-0749-4cb8-b61a-304f252e45ec')]",
                "principalId": "[parameters('currentUserPrincipalId')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2024-06-01",
              "name": "privatelink.azurecr.io",
              "location": "global",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2024-06-01",
              "name": "[format('{0}/{1}', 'privatelink.azurecr.io', format('vnetlink-{0}', parameters('registryName')))]",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[parameters('vnetId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.azurecr.io')]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2024-05-01",
              "name": "[format('pe-{0}', parameters('registryName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('plsc-{0}', parameters('registryName'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName'))]",
                      "groupIds": [
                        "registry"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2024-05-01",
              "name": "[format('{0}/{1}', format('pe-{0}', parameters('registryName')), 'default')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "registry-config",
                    "properties": {
                      "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.azurecr.io')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.azurecr.io')]",
                "[resourceId('Microsoft.Network/privateEndpoints', format('pe-{0}', parameters('registryName')))]"
              ]
            }
          ],
          "outputs": {
            "registryId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName'))]"
            },
            "registryName": {
              "type": "string",
              "value": "[parameters('registryName')]"
            },
            "loginServer": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName')), '2023-07-01').loginServer]"
            }
          }
        }
      },
      "dependsOn": [
        "network",
        "resourceGroup"
      ]
    },
    "containerAppsEnvironment": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "container-apps-environment",
      "resourceGroup": "[format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "environmentName": {
            "value": "[format('{0}{1}', variables('abbrs').appManagedEnvironments, variables('resourceToken'))]"
          },
          "logAnalyticsWorkspaceName": {
            "value": "[reference('monitoring').outputs.logAnalyticsWorkspaceName.value]"
          },
          "containerAppsSubnetId": {
            "value": "[reference('network').outputs.containerAppsSubnetId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "17364830428479416181"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "environmentName": {
              "type": "string"
            },
            "logAnalyticsWorkspaceName": {
              "type": "string"
            },
            "containerAppsSubnetId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.App/managedEnvironments",
              "apiVersion": "2025-01-01",
              "name": "[parameters('environmentName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "appLogsConfiguration": {
                  "destination": "log-analytics",
                  "logAnalyticsConfiguration": {
                    "customerId": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName')), '2023-09-01').customerId]",
                    "sharedKey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName')), '2023-09-01').primarySharedKey]"
                  }
                },
                "vnetConfiguration": {
                  "infrastructureSubnetId": "[parameters('containerAppsSubnetId')]"
                },
                "workloadProfiles": [
                  {
                    "name": "Consumption",
                    "workloadProfileType": "Consumption"
                  }
                ]
              }
            }
          ],
          "outputs": {
            "environmentId": {
              "type": "string",
              "value": "[resourceId('Microsoft.App/managedEnvironments', parameters('environmentName'))]"
            },
            "environmentName": {
              "type": "string",
              "value": "[parameters('environmentName')]"
            }
          }
        }
      },
      "dependsOn": [
        "monitoring",
        "network",
        "resourceGroup"
      ]
    },
    "containerApp": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "container-app",
      "resourceGroup": "[format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('{0}app-{1}', variables('abbrs').appContainerApps, variables('resourceToken'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[union(variables('tags'), createObject('azd-service-name', 'app'))]"
          },
          "containerAppsEnvironmentName": {
            "value": "[reference('containerAppsEnvironment').outputs.environmentName.value]"
          },
          "containerRegistryName": {
            "value": "[reference('containerRegistry').outputs.registryName.value]"
          },
          "imageName": "[if(not(empty(parameters('containerAppImageName'))), createObject('value', parameters('containerAppImageName')), createObject('value', ''))]",
          "exists": {
            "value": "[parameters('containerAppExists')]"
          },
          "identityType": {
            "value": "UserAssigned"
          },
          "identityName": {
            "value": "[reference('managedIdentity').outputs.managedIdentityName.value]"
          },
          "identityPrincipalId": {
            "value": "[reference('managedIdentity').outputs.managedIdentityPrincipalId.value]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[reference('managedIdentity').outputs.managedIdentityId.value]"
          },
          "env": {
            "value": [
              {
                "name": "REDIS_HOST",
                "value": "[reference('redis').outputs.redisHost.value]"
              },
              {
                "name": "REDIS_PORT",
                "value": "10000"
              },
              {
                "name": "REDIS_SSL",
                "value": "true"
              },
              {
                "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                "secretRef": "appinsights-connection-string"
              },
              {
                "name": "APP_PORT",
                "value": "8000"
              },
              {
                "name": "LOG_LEVEL",
                "value": "INFO"
              },
              {
                "name": "AZURE_CLIENT_ID",
                "value": "[reference('managedIdentity').outputs.managedIdentityClientId.value]"
              }
            ]
          },
          "secrets": {
            "value": {
              "secureList": [
                {
                  "name": "appinsights-connection-string",
                  "value": "[listOutputsWithSecureValues('monitoring', '2022-09-01').applicationInsightsConnectionString]"
                }
              ]
            }
          },
          "targetPort": {
            "value": 8000
          },
          "containerMinReplicas": {
            "value": 1
          },
          "containerMaxReplicas": {
            "value": 1
          },
          "containerCpuCoreCount": {
            "value": "0.25"
          },
          "containerMemory": {
            "value": "0.5Gi"
          },
          "ingressEnabled": {
            "value": true
          },
          "external": {
            "value": true
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "14203792841267151725"
            },
            "name": "Azd Container App Upsert",
            "description": "Creates or updates an existing Azure Container App.\n\n**Note:** This module is not intended for broad, generic use, as it was designed to cater for the requirements of the AZD CLI product. Feature requests and bug fix requests are welcome if they support the development of the AZD CLI but may not be incorporated if they aim to make this module more generic than what it needs to be for its primary use case"
          },
          "definitions": {
            "environmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Environment variable name."
                  }
                },
                "secretRef": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the Container App secret from which to pull the environment variable value."
                  }
                },
                "value": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Non-secret environment variable value."
                  }
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Container App."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "containerAppsEnvironmentName": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the environment for container apps."
              }
            },
            "containerCpuCoreCount": {
              "type": "string",
              "defaultValue": "0.5",
              "metadata": {
                "description": "Optional. The number of CPU cores allocated to a single container instance, e.g., 0.5."
              }
            },
            "containerMaxReplicas": {
              "type": "int",
              "defaultValue": 10,
              "minValue": 1,
              "metadata": {
                "description": "Optional. The maximum number of replicas to run. Must be at least 1."
              }
            },
            "containerMemory": {
              "type": "string",
              "defaultValue": "1.0Gi",
              "metadata": {
                "description": "Optional. The amount of memory allocated to a single container instance, e.g., 1Gi."
              }
            },
            "containerMinReplicas": {
              "type": "int",
              "defaultValue": 2,
              "minValue": 1,
              "metadata": {
                "description": "Optional. The minimum number of replicas to run. Must be at least 2."
              }
            },
            "containerName": {
              "type": "string",
              "defaultValue": "main",
              "metadata": {
                "description": "Optional. The name of the container."
              }
            },
            "containerRegistryName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The name of the container registry."
              }
            },
            "containerRegistryHostSuffix": {
              "type": "string",
              "defaultValue": "azurecr.io",
              "metadata": {
                "description": "Optional. Hostname suffix for container registry. Set when deploying to sovereign clouds."
              }
            },
            "daprAppProtocol": {
              "type": "string",
              "defaultValue": "http",
              "allowedValues": [
                "http",
                "grpc"
              ],
              "metadata": {
                "description": "Optional. The protocol used by Dapr to connect to the app, e.g., HTTP or gRPC."
              }
            },
            "daprEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enable or disable Dapr for the container app."
              }
            },
            "daprAppId": {
              "type": "string",
              "defaultValue": "[parameters('containerName')]",
              "metadata": {
                "description": "Optional. The Dapr app ID."
              }
            },
            "exists": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Specifies if the resource already exists."
              }
            },
            "ingressEnabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Specifies if Ingress is enabled for the container app."
              }
            },
            "identityType": {
              "type": "string",
              "defaultValue": "None",
              "allowedValues": [
                "None",
                "SystemAssigned",
                "UserAssigned"
              ],
              "metadata": {
                "description": "Optional. The type of identity for the resource."
              }
            },
            "identityName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The name of the user-assigned identity."
              }
            },
            "imageName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The name of the container image."
              }
            },
            "secrets": {
              "type": "secureObject",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The secrets required for the container."
              }
            },
            "env": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/environmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The environment variables for the container."
              }
            },
            "external": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Specifies if the resource ingress is exposed externally."
              }
            },
            "serviceBinds": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The service binds associated with the container."
              }
            },
            "targetPort": {
              "type": "int",
              "defaultValue": 80,
              "metadata": {
                "description": "Optional. The target port for the container."
              }
            },
            "identityPrincipalId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The principal ID of the principal to assign the role to."
              }
            },
            "userAssignedIdentityResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource id of the user-assigned identity."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.ptn.azd-containerappupsert.{0}.{1}', replace('0.1.2', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "existingApp": {
              "condition": "[parameters('exists')]",
              "existing": true,
              "type": "Microsoft.App/containerApps",
              "apiVersion": "2023-05-02-preview",
              "name": "[parameters('name')]"
            },
            "app": {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-container-app-update', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "identityType": {
                    "value": "[parameters('identityType')]"
                  },
                  "identityName": {
                    "value": "[parameters('identityName')]"
                  },
                  "ingressEnabled": {
                    "value": "[parameters('ingressEnabled')]"
                  },
                  "containerName": {
                    "value": "[parameters('containerName')]"
                  },
                  "containerAppsEnvironmentName": {
                    "value": "[parameters('containerAppsEnvironmentName')]"
                  },
                  "containerRegistryName": {
                    "value": "[parameters('containerRegistryName')]"
                  },
                  "containerRegistryHostSuffix": {
                    "value": "[parameters('containerRegistryHostSuffix')]"
                  },
                  "containerCpuCoreCount": {
                    "value": "[parameters('containerCpuCoreCount')]"
                  },
                  "containerMemory": {
                    "value": "[parameters('containerMemory')]"
                  },
                  "containerMinReplicas": {
                    "value": "[parameters('containerMinReplicas')]"
                  },
                  "containerMaxReplicas": {
                    "value": "[parameters('containerMaxReplicas')]"
                  },
                  "daprEnabled": {
                    "value": "[parameters('daprEnabled')]"
                  },
                  "daprAppId": {
                    "value": "[parameters('daprAppId')]"
                  },
                  "daprAppProtocol": {
                    "value": "[parameters('daprAppProtocol')]"
                  },
                  "secrets": {
                    "value": "[parameters('secrets')]"
                  },
                  "external": {
                    "value": "[parameters('external')]"
                  },
                  "env": {
                    "value": "[parameters('env')]"
                  },
                  "imageName": "[if(not(empty(parameters('imageName'))), createObject('value', parameters('imageName')), if(parameters('exists'), createObject('value', reference('existingApp').template.containers[0].image), createObject('value', '')))]",
                  "targetPort": {
                    "value": "[parameters('targetPort')]"
                  },
                  "serviceBinds": {
                    "value": "[parameters('serviceBinds')]"
                  },
                  "principalId": "[if(and(not(empty(parameters('identityName'))), not(empty(parameters('containerRegistryName')))), createObject('value', parameters('identityPrincipalId')), createObject('value', ''))]",
                  "userAssignedIdentityResourceId": "[if(and(not(empty(parameters('identityName'))), not(empty(parameters('containerRegistryName')))), createObject('value', parameters('userAssignedIdentityResourceId')), createObject('value', ''))]",
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "13777874990841344112"
                    },
                    "name": "Azd ACR Linked Container App",
                    "description": "Creates a container app in an Azure Container App environment.\n\n**Note:** This module is not intended for broad, generic use, as it was designed to cater for the requirements of the AZD CLI product. Feature requests and bug fix requests are welcome if they support the development of the AZD CLI but may not be incorporated if they aim to make this module more generic than what it needs to be for its primary use case",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "environmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Environment variable name."
                          }
                        },
                        "secretRef": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of the Container App secret from which to pull the environment variable value."
                          }
                        },
                        "value": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Non-secret environment variable value."
                          }
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Container App."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "allowedOrigins": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Allowed origins."
                      }
                    },
                    "containerAppsEnvironmentName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the environment for container apps."
                      }
                    },
                    "containerCpuCoreCount": {
                      "type": "string",
                      "defaultValue": "0.5",
                      "metadata": {
                        "description": "Optional. CPU cores allocated to a single container instance, e.g., 0.5."
                      }
                    },
                    "containerMaxReplicas": {
                      "type": "int",
                      "defaultValue": 10,
                      "minValue": 1,
                      "metadata": {
                        "description": "Optional. The maximum number of replicas to run. Must be at least 1."
                      }
                    },
                    "containerMemory": {
                      "type": "string",
                      "defaultValue": "1.0Gi",
                      "metadata": {
                        "description": "Optional. Memory allocated to a single container instance, e.g., 1Gi."
                      }
                    },
                    "containerMinReplicas": {
                      "type": "int",
                      "defaultValue": 2,
                      "metadata": {
                        "description": "Optional. The minimum number of replicas to run. Must be at least 2."
                      }
                    },
                    "containerName": {
                      "type": "string",
                      "defaultValue": "main",
                      "metadata": {
                        "description": "Optional. The name of the container."
                      }
                    },
                    "containerRegistryName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The name of the container registry."
                      }
                    },
                    "containerRegistryHostSuffix": {
                      "type": "string",
                      "defaultValue": "azurecr.io",
                      "metadata": {
                        "description": "Optional. Hostname suffix for container registry. Set when deploying to sovereign clouds."
                      }
                    },
                    "daprAppProtocol": {
                      "type": "string",
                      "defaultValue": "http",
                      "allowedValues": [
                        "http",
                        "grpc"
                      ],
                      "metadata": {
                        "description": "Optional. The protocol used by Dapr to connect to the app, e.g., http or grpc."
                      }
                    },
                    "daprAppId": {
                      "type": "string",
                      "defaultValue": "[parameters('containerName')]",
                      "metadata": {
                        "description": "Optional. The Dapr app ID."
                      }
                    },
                    "daprEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enable Dapr."
                      }
                    },
                    "env": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/environmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The environment variables for the container."
                      }
                    },
                    "external": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Specifies if the resource ingress is exposed externally."
                      }
                    },
                    "identityName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The name of the user-assigned identity."
                      }
                    },
                    "identityType": {
                      "type": "string",
                      "defaultValue": "None",
                      "allowedValues": [
                        "None",
                        "SystemAssigned",
                        "UserAssigned"
                      ],
                      "metadata": {
                        "description": "Optional. The type of identity for the resource."
                      }
                    },
                    "imageName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The name of the container image."
                      }
                    },
                    "ingressEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Specifies if Ingress is enabled for the container app."
                      }
                    },
                    "ingressTransport": {
                      "type": "string",
                      "defaultValue": "auto",
                      "allowedValues": [
                        "auto",
                        "http",
                        "http2",
                        "tcp"
                      ],
                      "metadata": {
                        "description": "Optional. Ingress transport protocol."
                      }
                    },
                    "ipSecurityRestrictions": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Rules to restrict incoming IP address."
                      }
                    },
                    "ingressAllowInsecure": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Bool indicating if HTTP connections to is allowed. If set to false HTTP connections are automatically redirected to HTTPS connections."
                      }
                    },
                    "revisionMode": {
                      "type": "string",
                      "defaultValue": "Single",
                      "allowedValues": [
                        "Multiple",
                        "Single"
                      ],
                      "metadata": {
                        "description": "Optional. Controls how active revisions are handled for the Container app."
                      }
                    },
                    "secrets": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The secrets required for the container."
                      }
                    },
                    "serviceBinds": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The service binds associated with the container."
                      }
                    },
                    "serviceType": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The name of the container apps add-on to use. e.g. redis."
                      }
                    },
                    "targetPort": {
                      "type": "int",
                      "defaultValue": 80,
                      "metadata": {
                        "description": "Optional. The target port for the container."
                      }
                    },
                    "includeAddOns": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Toggle to include the service configuration."
                      }
                    },
                    "principalId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The principal ID of the principal to assign the role to."
                      }
                    },
                    "userAssignedIdentityResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The resource id of the user-assigned identity."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "usePrivateRegistry": "[and(not(empty(parameters('identityName'))), not(empty(parameters('containerRegistryName'))))]",
                    "normalizedIdentityType": "[if(not(empty(parameters('identityName'))), 'UserAssigned', parameters('identityType'))]"
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.ptn.azd-acrcontainerapp.{0}.{1}', replace('0.1.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "containerAppsEnvironment": {
                      "existing": true,
                      "type": "Microsoft.App/managedEnvironments",
                      "apiVersion": "2023-05-01",
                      "name": "[parameters('containerAppsEnvironmentName')]"
                    },
                    "containerApp": {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-container-app', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('name')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "managedIdentities": "[if(and(not(empty(parameters('identityName'))), equals(variables('normalizedIdentityType'), 'UserAssigned')), createObject('value', createObject('userAssignedResourceIds', createArray(parameters('userAssignedIdentityResourceId')))), createObject('value', createObject('systemAssigned', equals(variables('normalizedIdentityType'), 'SystemAssigned'))))]",
                          "environmentResourceId": {
                            "value": "[resourceId('Microsoft.App/managedEnvironments', parameters('containerAppsEnvironmentName'))]"
                          },
                          "activeRevisionsMode": {
                            "value": "[parameters('revisionMode')]"
                          },
                          "disableIngress": {
                            "value": "[not(parameters('ingressEnabled'))]"
                          },
                          "ingressExternal": {
                            "value": "[parameters('external')]"
                          },
                          "ingressTargetPort": {
                            "value": "[parameters('targetPort')]"
                          },
                          "ingressTransport": {
                            "value": "[parameters('ingressTransport')]"
                          },
                          "ipSecurityRestrictions": {
                            "value": "[parameters('ipSecurityRestrictions')]"
                          },
                          "ingressAllowInsecure": {
                            "value": "[parameters('ingressAllowInsecure')]"
                          },
                          "corsPolicy": {
                            "value": {
                              "allowedOrigins": "[union(createArray('https://portal.azure.com', 'https://ms.portal.azure.com'), parameters('allowedOrigins'))]"
                            }
                          },
                          "dapr": "[if(parameters('daprEnabled'), createObject('value', createObject('enabled', true(), 'appId', parameters('daprAppId'), 'appProtocol', parameters('daprAppProtocol'), 'appPort', if(parameters('ingressEnabled'), parameters('targetPort'), 0))), createObject('value', createObject('enabled', false())))]",
                          "secrets": {
                            "value": "[parameters('secrets')]"
                          },
                          "includeAddOns": {
                            "value": "[parameters('includeAddOns')]"
                          },
                          "service": {
                            "value": {
                              "type": "[parameters('serviceType')]"
                            }
                          },
                          "registries": "[if(variables('usePrivateRegistry'), createObject('value', createArray(createObject('server', format('{0}.{1}', parameters('containerRegistryName'), parameters('containerRegistryHostSuffix')), 'identity', parameters('userAssignedIdentityResourceId')))), createObject('value', createArray()))]",
                          "serviceBinds": {
                            "value": "[parameters('serviceBinds')]"
                          },
                          "containers": {
                            "value": [
                              {
                                "image": "[if(not(empty(parameters('imageName'))), parameters('imageName'), 'mcr.microsoft.com/azuredocs/containerapps-helloworld:latest')]",
                                "name": "[parameters('containerName')]",
                                "env": "[parameters('env')]",
                                "resources": {
                                  "cpu": "[json(parameters('containerCpuCoreCount'))]",
                                  "memory": "[parameters('containerMemory')]"
                                }
                              }
                            ]
                          },
                          "scaleMaxReplicas": {
                            "value": "[parameters('containerMaxReplicas')]"
                          },
                          "scaleMinReplicas": {
                            "value": "[parameters('containerMinReplicas')]"
                          },
                          "enableTelemetry": {
                            "value": "[parameters('enableTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "9894768173968934379"
                            },
                            "name": "Container Apps",
                            "description": "This module deploys a Container App.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "managedIdentitiesType": {
                              "type": "object",
                              "properties": {
                                "systemAssigned": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enables system assigned managed identity on the resource."
                                  }
                                },
                                "userAssignedResourceIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID(s) to assign to the resource."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                    }
                                  },
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "container": {
                              "type": "object",
                              "properties": {
                                "args": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Container start command arguments."
                                  }
                                },
                                "command": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Container start command."
                                  }
                                },
                                "env": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/environmentVar"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Container environment variables."
                                  }
                                },
                                "image": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Container image tag."
                                  }
                                },
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Custom container name."
                                  }
                                },
                                "probes": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/containerAppProbe"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. List of probes for the container."
                                  }
                                },
                                "resources": {
                                  "type": "object",
                                  "metadata": {
                                    "description": "Required. Container resource requirements."
                                  }
                                },
                                "volumeMounts": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/volumeMount"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Container volume mounts."
                                  }
                                }
                              }
                            },
                            "ingressPortMapping": {
                              "type": "object",
                              "properties": {
                                "exposedPort": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies the exposed port for the target port. If not specified, it defaults to target port."
                                  }
                                },
                                "external": {
                                  "type": "bool",
                                  "metadata": {
                                    "description": "Required. Specifies whether the app port is accessible outside of the environment."
                                  }
                                },
                                "targetPort": {
                                  "type": "int",
                                  "metadata": {
                                    "description": "Required. Specifies the port the container listens on."
                                  }
                                }
                              }
                            },
                            "serviceBind": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the service."
                                  }
                                },
                                "serviceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The service ID."
                                  }
                                }
                              }
                            },
                            "environmentVar": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Environment variable name."
                                  }
                                },
                                "secretRef": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of the Container App secret from which to pull the environment variable value."
                                  }
                                },
                                "value": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Non-secret environment variable value."
                                  }
                                }
                              }
                            },
                            "containerAppProbe": {
                              "type": "object",
                              "properties": {
                                "failureThreshold": {
                                  "type": "int",
                                  "nullable": true,
                                  "minValue": 1,
                                  "maxValue": 10,
                                  "metadata": {
                                    "description": "Optional. Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3."
                                  }
                                },
                                "httpGet": {
                                  "$ref": "#/definitions/containerAppProbeHttpGet",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. HTTPGet specifies the http request to perform."
                                  }
                                },
                                "initialDelaySeconds": {
                                  "type": "int",
                                  "nullable": true,
                                  "minValue": 1,
                                  "maxValue": 60,
                                  "metadata": {
                                    "description": "Optional. Number of seconds after the container has started before liveness probes are initiated."
                                  }
                                },
                                "periodSeconds": {
                                  "type": "int",
                                  "nullable": true,
                                  "minValue": 1,
                                  "maxValue": 240,
                                  "metadata": {
                                    "description": "Optional. How often (in seconds) to perform the probe. Default to 10 seconds."
                                  }
                                },
                                "successThreshold": {
                                  "type": "int",
                                  "nullable": true,
                                  "minValue": 1,
                                  "maxValue": 10,
                                  "metadata": {
                                    "description": "Optional. Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup."
                                  }
                                },
                                "tcpSocket": {
                                  "$ref": "#/definitions/containerAppProbeTcpSocket",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported."
                                  }
                                },
                                "terminationGracePeriodSeconds": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is an alpha field and requires enabling ProbeTerminationGracePeriod feature gate. Maximum value is 3600 seconds (1 hour)."
                                  }
                                },
                                "timeoutSeconds": {
                                  "type": "int",
                                  "nullable": true,
                                  "minValue": 1,
                                  "maxValue": 240,
                                  "metadata": {
                                    "description": "Optional. Number of seconds after which the probe times out. Defaults to 1 second."
                                  }
                                },
                                "type": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Liveness",
                                    "Readiness",
                                    "Startup"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The type of probe."
                                  }
                                }
                              }
                            },
                            "corsPolicyType": {
                              "type": "object",
                              "properties": {
                                "allowCredentials": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Switch to determine whether the resource allows credentials."
                                  }
                                },
                                "allowedHeaders": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies the content for the access-control-allow-headers header."
                                  }
                                },
                                "allowedMethods": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies the content for the access-control-allow-methods header."
                                  }
                                },
                                "allowedOrigins": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies the content for the access-control-allow-origins header."
                                  }
                                },
                                "exposeHeaders": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies the content for the access-control-expose-headers header."
                                  }
                                },
                                "maxAge": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies the content for the access-control-max-age header."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "containerAppProbeHttpGet": {
                              "type": "object",
                              "properties": {
                                "host": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Host name to connect to. Defaults to the pod IP."
                                  }
                                },
                                "httpHeaders": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/containerAppProbeHttpGetHeadersItem"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. HTTP headers to set in the request."
                                  }
                                },
                                "path": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Path to access on the HTTP server."
                                  }
                                },
                                "port": {
                                  "type": "int",
                                  "metadata": {
                                    "description": "Required. Name or number of the port to access on the container."
                                  }
                                },
                                "scheme": {
                                  "type": "string",
                                  "allowedValues": [
                                    "HTTP",
                                    "HTTPS"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Scheme to use for connecting to the host. Defaults to HTTP."
                                  }
                                }
                              }
                            },
                            "containerAppProbeHttpGetHeadersItem": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of the header."
                                  }
                                },
                                "value": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Value of the header."
                                  }
                                }
                              }
                            },
                            "containerAppProbeTcpSocket": {
                              "type": "object",
                              "properties": {
                                "host": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Host name to connect to, defaults to the pod IP."
                                  }
                                },
                                "port": {
                                  "type": "int",
                                  "minValue": 1,
                                  "maxValue": 65535,
                                  "metadata": {
                                    "description": "Required. Number of the port to access on the container. Name must be an IANA_SVC_NAME."
                                  }
                                }
                              }
                            },
                            "volumeMount": {
                              "type": "object",
                              "properties": {
                                "mountPath": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Path within the container at which the volume should be mounted.Must not contain ':'."
                                  }
                                },
                                "subPath": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root)."
                                  }
                                },
                                "volumeName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. This must match the Name of a Volume."
                                  }
                                }
                              }
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Container App."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "disableIngress": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Bool to disable all ingress traffic for the container app."
                              }
                            },
                            "ingressExternal": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Bool indicating if the App exposes an external HTTP endpoint."
                              }
                            },
                            "clientCertificateMode": {
                              "type": "string",
                              "defaultValue": "ignore",
                              "allowedValues": [
                                "accept",
                                "ignore",
                                "require"
                              ],
                              "metadata": {
                                "description": "Optional. Client certificate mode for mTLS."
                              }
                            },
                            "corsPolicy": {
                              "$ref": "#/definitions/corsPolicyType",
                              "metadata": {
                                "description": "Optional. Object userd to configure CORS policy."
                              }
                            },
                            "stickySessionsAffinity": {
                              "type": "string",
                              "defaultValue": "none",
                              "allowedValues": [
                                "none",
                                "sticky"
                              ],
                              "metadata": {
                                "description": "Optional. Bool indicating if the Container App should enable session affinity."
                              }
                            },
                            "ingressTransport": {
                              "type": "string",
                              "defaultValue": "auto",
                              "allowedValues": [
                                "auto",
                                "http",
                                "http2",
                                "tcp"
                              ],
                              "metadata": {
                                "description": "Optional. Ingress transport protocol."
                              }
                            },
                            "service": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Dev ContainerApp service type."
                              }
                            },
                            "includeAddOns": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Toggle to include the service configuration."
                              }
                            },
                            "additionalPortMappings": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/ingressPortMapping"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Settings to expose additional ports on container app."
                              }
                            },
                            "ingressAllowInsecure": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Bool indicating if HTTP connections to is allowed. If set to false HTTP connections are automatically redirected to HTTPS connections."
                              }
                            },
                            "ingressTargetPort": {
                              "type": "int",
                              "defaultValue": 80,
                              "metadata": {
                                "description": "Optional. Target Port in containers for traffic from ingress."
                              }
                            },
                            "scaleMaxReplicas": {
                              "type": "int",
                              "defaultValue": 10,
                              "metadata": {
                                "description": "Optional. Maximum number of container replicas. Defaults to 10 if not set."
                              }
                            },
                            "scaleMinReplicas": {
                              "type": "int",
                              "defaultValue": 3,
                              "metadata": {
                                "description": "Optional. Minimum number of container replicas. Defaults to 3 if not set."
                              }
                            },
                            "scaleRules": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Scaling rules."
                              }
                            },
                            "serviceBinds": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/serviceBind"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. List of container app services bound to the app."
                              }
                            },
                            "activeRevisionsMode": {
                              "type": "string",
                              "defaultValue": "Single",
                              "allowedValues": [
                                "Multiple",
                                "Single"
                              ],
                              "metadata": {
                                "description": "Optional. Controls how active revisions are handled for the Container app."
                              }
                            },
                            "environmentResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of environment."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "registries": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Collection of private container registry credentials for containers used by the Container app."
                              }
                            },
                            "managedIdentities": {
                              "$ref": "#/definitions/managedIdentitiesType",
                              "metadata": {
                                "description": "Optional. The managed identity definition for this resource."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            },
                            "customDomains": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Custom domain bindings for Container App hostnames."
                              }
                            },
                            "exposedPort": {
                              "type": "int",
                              "defaultValue": 0,
                              "metadata": {
                                "description": "Optional. Exposed Port in containers for TCP traffic from ingress."
                              }
                            },
                            "ipSecurityRestrictions": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Rules to restrict incoming IP address."
                              }
                            },
                            "trafficLabel": {
                              "type": "string",
                              "defaultValue": "label-1",
                              "metadata": {
                                "description": "Optional. Associates a traffic label with a revision. Label name should be consist of lower case alphanumeric characters or dashes."
                              }
                            },
                            "trafficLatestRevision": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Indicates that the traffic weight belongs to a latest stable revision."
                              }
                            },
                            "trafficRevisionName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of a revision."
                              }
                            },
                            "trafficWeight": {
                              "type": "int",
                              "defaultValue": 100,
                              "metadata": {
                                "description": "Optional. Traffic weight assigned to a revision."
                              }
                            },
                            "dapr": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Dapr configuration for the Container App."
                              }
                            },
                            "maxInactiveRevisions": {
                              "type": "int",
                              "defaultValue": 0,
                              "metadata": {
                                "description": "Optional. Max inactive revisions a Container App can have."
                              }
                            },
                            "containers": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/container"
                              },
                              "metadata": {
                                "description": "Required. List of container definitions for the Container App."
                              }
                            },
                            "initContainersTemplate": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. List of specialized containers that run before app containers."
                              }
                            },
                            "secrets": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The secrets of the Container App."
                              }
                            },
                            "revisionSuffix": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. User friendly suffix that is appended to the revision name."
                              }
                            },
                            "volumes": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. List of volume definitions for the Container App."
                              }
                            },
                            "workloadProfileName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Workload profile name to pin for container app execution."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "secretList": "[if(not(empty(parameters('secrets'))), parameters('secrets').secureList, createArray())]",
                            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                            "builtInRoleNames": {
                              "ContainerApp Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ad2dd5fb-cd4b-4fd4-a9b6-4fed3630980b')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.app-containerapp.{0}.{1}', replace('0.10.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "containerApp": {
                              "type": "Microsoft.App/containerApps",
                              "apiVersion": "2024-03-01",
                              "name": "[parameters('name')]",
                              "tags": "[parameters('tags')]",
                              "location": "[parameters('location')]",
                              "identity": "[variables('identity')]",
                              "properties": {
                                "environmentId": "[parameters('environmentResourceId')]",
                                "configuration": {
                                  "activeRevisionsMode": "[parameters('activeRevisionsMode')]",
                                  "dapr": "[if(not(empty(parameters('dapr'))), parameters('dapr'), null())]",
                                  "ingress": "[if(parameters('disableIngress'), null(), createObject('additionalPortMappings', parameters('additionalPortMappings'), 'allowInsecure', if(not(equals(parameters('ingressTransport'), 'tcp')), parameters('ingressAllowInsecure'), false()), 'customDomains', if(not(empty(parameters('customDomains'))), parameters('customDomains'), null()), 'corsPolicy', if(and(not(equals(parameters('corsPolicy'), null())), not(equals(parameters('ingressTransport'), 'tcp'))), createObject('allowCredentials', coalesce(tryGet(parameters('corsPolicy'), 'allowCredentials'), false()), 'allowedHeaders', coalesce(tryGet(parameters('corsPolicy'), 'allowedHeaders'), createArray()), 'allowedMethods', coalesce(tryGet(parameters('corsPolicy'), 'allowedMethods'), createArray()), 'allowedOrigins', coalesce(tryGet(parameters('corsPolicy'), 'allowedOrigins'), createArray()), 'exposeHeaders', coalesce(tryGet(parameters('corsPolicy'), 'exposeHeaders'), createArray()), 'maxAge', tryGet(parameters('corsPolicy'), 'maxAge')), null()), 'clientCertificateMode', if(not(equals(parameters('ingressTransport'), 'tcp')), parameters('clientCertificateMode'), null()), 'exposedPort', parameters('exposedPort'), 'external', parameters('ingressExternal'), 'ipSecurityRestrictions', if(not(empty(parameters('ipSecurityRestrictions'))), parameters('ipSecurityRestrictions'), null()), 'targetPort', parameters('ingressTargetPort'), 'stickySessions', createObject('affinity', parameters('stickySessionsAffinity')), 'traffic', if(not(equals(parameters('ingressTransport'), 'tcp')), createArray(createObject('label', parameters('trafficLabel'), 'latestRevision', parameters('trafficLatestRevision'), 'revisionName', parameters('trafficRevisionName'), 'weight', parameters('trafficWeight'))), null()), 'transport', parameters('ingressTransport')))]",
                                  "service": "[if(and(parameters('includeAddOns'), not(empty(parameters('service')))), parameters('service'), null())]",
                                  "maxInactiveRevisions": "[parameters('maxInactiveRevisions')]",
                                  "registries": "[if(not(empty(parameters('registries'))), parameters('registries'), null())]",
                                  "secrets": "[variables('secretList')]"
                                },
                                "template": {
                                  "containers": "[parameters('containers')]",
                                  "initContainers": "[if(not(empty(parameters('initContainersTemplate'))), parameters('initContainersTemplate'), null())]",
                                  "revisionSuffix": "[parameters('revisionSuffix')]",
                                  "scale": {
                                    "maxReplicas": "[parameters('scaleMaxReplicas')]",
                                    "minReplicas": "[parameters('scaleMinReplicas')]",
                                    "rules": "[if(not(empty(parameters('scaleRules'))), parameters('scaleRules'), null())]"
                                  },
                                  "serviceBinds": "[if(and(parameters('includeAddOns'), not(empty(parameters('serviceBinds')))), parameters('serviceBinds'), null())]",
                                  "volumes": "[if(not(empty(parameters('volumes'))), parameters('volumes'), null())]"
                                },
                                "workloadProfileName": "[parameters('workloadProfileName')]"
                              }
                            },
                            "containerApp_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.App/containerApps/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "containerApp"
                              ]
                            },
                            "containerApp_roleAssignments": {
                              "copy": {
                                "name": "containerApp_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.App/containerApps/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.App/containerApps', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "containerApp"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the Container App."
                              },
                              "value": "[resourceId('Microsoft.App/containerApps', parameters('name'))]"
                            },
                            "fqdn": {
                              "type": "string",
                              "metadata": {
                                "description": "The configuration of ingress fqdn."
                              },
                              "value": "[if(parameters('disableIngress'), 'IngressDisabled', reference('containerApp').configuration.ingress.fqdn)]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the Container App was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the Container App."
                              },
                              "value": "[parameters('name')]"
                            },
                            "systemAssignedMIPrincipalId": {
                              "type": "string",
                              "metadata": {
                                "description": "The principal ID of the system assigned identity."
                              },
                              "value": "[coalesce(tryGet(tryGet(reference('containerApp', '2024-03-01', 'full'), 'identity'), 'principalId'), '')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('containerApp', '2024-03-01', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "containerAppsEnvironment",
                        "containerRegistryAccess"
                      ]
                    },
                    "containerRegistryAccess": {
                      "condition": "[variables('usePrivateRegistry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-registry-access', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "containerRegistryName": {
                            "value": "[parameters('containerRegistryName')]"
                          },
                          "principalId": "[if(variables('usePrivateRegistry'), createObject('value', parameters('principalId')), createObject('value', ''))]",
                          "enableTelemetry": {
                            "value": "[parameters('enableTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "676465844790879977"
                            },
                            "name": "ACR Pull permissions",
                            "description": "Assigns ACR Pull permissions to access an Azure Container Registry.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "containerRegistryName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the container registry."
                              }
                            },
                            "principalId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "acrPullRole": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[guid(subscription().id, resourceGroup().id, parameters('principalId'), variables('acrPullRole'))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "principalId": {
                                    "value": "[parameters('principalId')]"
                                  },
                                  "resourceId": {
                                    "value": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName'))]"
                                  },
                                  "roleDefinitionId": {
                                    "value": "[variables('acrPullRole')]"
                                  },
                                  "principalType": {
                                    "value": "ServicePrincipal"
                                  },
                                  "enableTelemetry": {
                                    "value": "[parameters('enableTelemetry')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "1847432691715853168"
                                    },
                                    "name": "Resource-scoped role assignment",
                                    "description": "This module deploys a Role Assignment for a specific resource.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The scope for the role assignment, fully qualified resourceId."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "[guid(parameters('resourceId'), parameters('principalId'), if(contains(parameters('roleDefinitionId'), '/providers/Microsoft.Authorization/roleDefinitions/'), parameters('roleDefinitionId'), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))))]",
                                      "metadata": {
                                        "description": "Optional. The unique guid name for the role assignment."
                                      }
                                    },
                                    "roleDefinitionId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The role definition ID for the role assignment."
                                      }
                                    },
                                    "roleName": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The name for the role, used for logging."
                                      }
                                    },
                                    "principalId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)."
                                      }
                                    },
                                    "principalType": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "allowedValues": [
                                        "ServicePrincipal",
                                        "Group",
                                        "User",
                                        "ForeignGroup",
                                        "Device",
                                        ""
                                      ],
                                      "metadata": {
                                        "description": "Optional. The principal type of the assigned principal ID."
                                      }
                                    },
                                    "description": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The description of role assignment."
                                      }
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "$fxv#0": {
                                      "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                      "contentVersion": "1.0.0.0",
                                      "parameters": {
                                        "scope": {
                                          "type": "string"
                                        },
                                        "name": {
                                          "type": "string"
                                        },
                                        "roleDefinitionId": {
                                          "type": "string"
                                        },
                                        "principalId": {
                                          "type": "string"
                                        },
                                        "principalType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Device",
                                            "ForeignGroup",
                                            "Group",
                                            "ServicePrincipal",
                                            "User",
                                            ""
                                          ],
                                          "defaultValue": "",
                                          "metadata": {
                                            "description": "Optional. The principal type of the assigned principal ID."
                                          }
                                        },
                                        "description": {
                                          "type": "string"
                                        }
                                      },
                                      "resources": [
                                        {
                                          "type": "Microsoft.Authorization/roleAssignments",
                                          "apiVersion": "2022-04-01",
                                          "scope": "[[parameters('scope')]",
                                          "name": "[[parameters('name')]",
                                          "properties": {
                                            "roleDefinitionId": "[[parameters('roleDefinitionId')]",
                                            "principalId": "[[parameters('principalId')]",
                                            "principalType": "[[parameters('principalType')]",
                                            "description": "[[parameters('description')]"
                                          }
                                        }
                                      ],
                                      "outputs": {
                                        "roleAssignmentId": {
                                          "type": "string",
                                          "value": "[[extensionResourceId(parameters('scope'), 'Microsoft.Authorization/roleAssignments', parameters('name'))]"
                                        }
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "condition": "[parameters('enableTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2024-03-01",
                                      "name": "[format('46d3xbcp.ptn.authorization-resourceroleassignment.{0}.{1}', replace('0.1.1', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": [],
                                          "outputs": {
                                            "telemetry": {
                                              "type": "String",
                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2023-07-01",
                                      "name": "[format('{0}-ResourceRoleAssignment', guid(parameters('resourceId'), parameters('principalId'), parameters('roleDefinitionId')))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "expressionEvaluationOptions": {
                                          "scope": "Outer"
                                        },
                                        "template": "[variables('$fxv#0')]",
                                        "parameters": {
                                          "scope": {
                                            "value": "[parameters('resourceId')]"
                                          },
                                          "name": {
                                            "value": "[parameters('name')]"
                                          },
                                          "roleDefinitionId": {
                                            "value": "[if(contains(parameters('roleDefinitionId'), '/providers/Microsoft.Authorization/roleDefinitions/'), parameters('roleDefinitionId'), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId')))]"
                                          },
                                          "principalId": {
                                            "value": "[parameters('principalId')]"
                                          },
                                          "principalType": {
                                            "value": "[parameters('principalType')]"
                                          },
                                          "description": {
                                            "value": "[parameters('description')]"
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The GUID of the Role Assignment."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "roleName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name for the role, used for logging."
                                      },
                                      "value": "[parameters('roleName')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the Role Assignment."
                                      },
                                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-ResourceRoleAssignment', guid(parameters('resourceId'), parameters('principalId'), parameters('roleDefinitionId')))), '2023-07-01').outputs.roleAssignmentId.value]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the role assignment was applied at."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the Container App was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "defaultDomain": {
                      "type": "string",
                      "metadata": {
                        "description": "The Default domain of the Managed Environment."
                      },
                      "value": "[reference('containerAppsEnvironment').defaultDomain]"
                    },
                    "identityPrincipalId": {
                      "type": "string",
                      "metadata": {
                        "description": "The principal ID of the identity."
                      },
                      "value": "[if(equals(variables('normalizedIdentityType'), 'None'), '', if(empty(parameters('identityName')), reference('containerApp').outputs.systemAssignedMIPrincipalId.value, parameters('principalId')))]"
                    },
                    "imageName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the container image."
                      },
                      "value": "[parameters('imageName')]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Container App."
                      },
                      "value": "[reference('containerApp').outputs.name.value]"
                    },
                    "serviceBind": {
                      "type": "object",
                      "metadata": {
                        "description": "The service binds associated with the container."
                      },
                      "value": "[if(not(empty(parameters('serviceType'))), createObject('serviceId', reference('containerApp').outputs.resourceId.value, 'name', reference('containerApp').outputs.name.value), createObject())]"
                    },
                    "uri": {
                      "type": "string",
                      "metadata": {
                        "description": "The uri of the Container App."
                      },
                      "value": "[if(parameters('ingressEnabled'), format('https://{0}', reference('containerApp').outputs.fqdn.value), '')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Container App."
                      },
                      "value": "[reference('containerApp').outputs.resourceId.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "existingApp"
              ]
            }
          },
          "outputs": {
            "defaultDomain": {
              "type": "string",
              "metadata": {
                "description": "The Default domain of the Container App."
              },
              "value": "[reference('app').outputs.defaultDomain.value]"
            },
            "imageName": {
              "type": "string",
              "metadata": {
                "description": "The name of the container image."
              },
              "value": "[reference('app').outputs.imageName.value]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the Container App."
              },
              "value": "[reference('app').outputs.name.value]"
            },
            "uri": {
              "type": "string",
              "metadata": {
                "description": "The uri of the Container App."
              },
              "value": "[reference('app').outputs.uri.value]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Container App."
              },
              "value": "[reference('app').outputs.resourceId.value]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the Container App was deployed into."
              },
              "value": "[resourceGroup().name]"
            }
          }
        }
      },
      "dependsOn": [
        "containerAppsEnvironment",
        "containerRegistry",
        "managedIdentity",
        "monitoring",
        "redis",
        "resourceGroup"
      ]
    },
    "alertRules": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "alert-rules",
      "resourceGroup": "[format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "containerAppName": {
            "value": "[reference('containerApp').outputs.name.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "4032019539855189579"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "containerAppName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Insights/metricAlerts",
              "apiVersion": "2018-03-01",
              "name": "[format('{0}-5xx-alerts', parameters('containerAppName'))]",
              "location": "global",
              "tags": "[parameters('tags')]",
              "properties": {
                "description": "Alert when 5xx errors exceed threshold",
                "severity": 2,
                "enabled": true,
                "scopes": [
                  "[resourceId('Microsoft.App/containerApps', parameters('containerAppName'))]"
                ],
                "evaluationFrequency": "PT1M",
                "windowSize": "PT5M",
                "criteria": {
                  "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                  "allOf": [
                    {
                      "name": "HTTP5xxErrors",
                      "metricName": "Requests",
                      "metricNamespace": "Microsoft.App/containerApps",
                      "dimensions": [
                        {
                          "name": "statusCodeCategory",
                          "operator": "Include",
                          "values": [
                            "5xx"
                          ]
                        }
                      ],
                      "operator": "GreaterThan",
                      "threshold": 5,
                      "timeAggregation": "Total",
                      "criterionType": "StaticThresholdCriterion"
                    }
                  ]
                },
                "autoMitigate": true,
                "targetResourceType": "Microsoft.App/containerApps",
                "targetResourceRegion": "[parameters('location')]"
              }
            },
            {
              "type": "Microsoft.Insights/metricAlerts",
              "apiVersion": "2018-03-01",
              "name": "[format('{0}-response-time-alerts', parameters('containerAppName'))]",
              "location": "global",
              "tags": "[parameters('tags')]",
              "properties": {
                "description": "Alert when average response time exceeds 5 seconds",
                "severity": 2,
                "enabled": true,
                "scopes": [
                  "[resourceId('Microsoft.App/containerApps', parameters('containerAppName'))]"
                ],
                "evaluationFrequency": "PT1M",
                "windowSize": "PT5M",
                "criteria": {
                  "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                  "allOf": [
                    {
                      "name": "HighResponseTime",
                      "metricName": "ResponseTime",
                      "metricNamespace": "Microsoft.App/containerApps",
                      "operator": "GreaterThan",
                      "threshold": 5000,
                      "timeAggregation": "Average",
                      "criterionType": "StaticThresholdCriterion"
                    }
                  ]
                },
                "autoMitigate": true,
                "targetResourceType": "Microsoft.App/containerApps",
                "targetResourceRegion": "[parameters('location')]"
              }
            }
          ],
          "outputs": {
            "alert5xxId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Insights/metricAlerts', format('{0}-5xx-alerts', parameters('containerAppName')))]"
            },
            "alertResponseTimeId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Insights/metricAlerts', format('{0}-response-time-alerts', parameters('containerAppName')))]"
            }
          }
        }
      },
      "dependsOn": [
        "containerApp",
        "resourceGroup"
      ]
    }
  },
  "outputs": {
    "AZURE_LOCATION": {
      "type": "string",
      "value": "[parameters('location')]"
    },
    "AZURE_RESOURCE_GROUP": {
      "type": "string",
      "value": "[format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))]"
    },
    "SERVICE_APP_NAME": {
      "type": "string",
      "value": "[reference('containerApp').outputs.name.value]"
    },
    "SERVICE_APP_URI": {
      "type": "string",
      "value": "[reference('containerApp').outputs.uri.value]"
    },
    "AZURE_MANAGED_IDENTITY_CLIENT_ID": {
      "type": "string",
      "value": "[reference('managedIdentity').outputs.managedIdentityClientId.value]"
    },
    "AZURE_REDIS_HOST": {
      "type": "string",
      "value": "[reference('redis').outputs.redisHost.value]"
    },
    "AZURE_REDIS_PORT": {
      "type": "int",
      "value": "[reference('redis').outputs.redisPort.value]"
    },
    "AZURE_CONTAINER_REGISTRY_NAME": {
      "type": "string",
      "value": "[reference('containerRegistry').outputs.registryName.value]"
    },
    "AZURE_CONTAINER_REGISTRY_LOGIN_SERVER": {
      "type": "string",
      "value": "[reference('containerRegistry').outputs.loginServer.value]"
    },
    "APPLICATIONINSIGHTS_CONNECTION_STRING": {
      "type": "securestring",
      "value": "[listOutputsWithSecureValues('monitoring', '2022-09-01').applicationInsightsConnectionString]"
    },
    "AZURE_ALERT_5XX_ID": {
      "type": "string",
      "value": "[reference('alertRules').outputs.alert5xxId.value]"
    },
    "AZURE_ALERT_RESPONSE_TIME_ID": {
      "type": "string",
      "value": "[reference('alertRules').outputs.alertResponseTimeId.value]"
    },
    "AZURE_NSG_NAME": {
      "type": "string",
      "value": "[reference('network').outputs.nsgName.value]"
    }
  }
}